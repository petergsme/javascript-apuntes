const perricosArray = [
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
];
//'perricosArray' es el contenedor de las im치genes de los dos primeros perricos que se pintan en pantalla por defecto al cargar la p치gina.

/*

SECCI칍N INICIAL DE TIMEOUT

*/

const timeOutId = setTimeout(() => {
  document.querySelector("#alert").style.display = "inline-block";
}, 3000); // A los 10 segundos muestra un texto que te dije que clickes un fucking boton.

// De dejar en mi caso display vac칤o para que intentara mostrarse no ir칤a. Esto solo funciona cuando ese display none lo has metido en su etiqueta de html como propiedad. Si lo metiste con CSS tienes que darle un bloque real.

function clearWarningText() {
  clearTimeout(timeOutId);
  document.querySelector("#alert").style.display = "none";
} //Cuando clicas un boton llamas a esta funcion, sirve para que no se muestre el texto que dice que clickes y se carga el timeout formalmente.

/*

FUNCIONES PARA EL DESPLEGABLE CON OPCIONES DE RAZAS

*/

async function populateSelect() {
  const dogBreedList = await getDogBreedList();
  const dogBreedArray = Object.keys(dogBreedList);

  const selectNode = document.querySelector('[name = "select"]');

  dogBreedArray.forEach((breed) => {
    const breedNode = document.createElement("option");
    breedNode.value = `${breed}`;
    breedNode.innerText = `${breed}`;

    selectNode.appendChild(breedNode);
  });
}

populateSelect();

let breedToAdd = "briard";

const selectNode = document.querySelector('[name = "select"]');
selectNode.addEventListener("change", (event) => {
  breedToAdd = event.target.value;
});

/*

FUNCIONES B츼SICAS PARA A칌ADIR PERRICOS Y DAR LISTENERS A LOS BOTONES DE SUS TARJETAS QUE A칌ADAN VOTOS.

*/

const giveDogNodeListeners = (dogNode) => {
  const likeButton = dogNode.querySelector(".like");
  const dislikeButton = dogNode.querySelector(".dislike");

  likeButton.addEventListener("click", () => {
    const likeCountNode = dogNode.querySelector(".like-count"); //Guardamos la posici칩n del contador positivo en una variable.
    likeCountNode.innerText = Number(likeCountNode.innerText) + 1; //Convertimos a n칰mero su interior y sumamos 1.
  });

  dislikeButton.addEventListener("click", () => {
    const dislikeCountNode = dogNode.querySelector(".dislike-count");
    dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1;
  });
};

function renderPerricoArray() {
  document.querySelector("#dog-list").innerHTML = "";

  perricosArray.forEach((dogImage) => {
    addPerrico(dogImage, false);
  });
}

function disableAllAddPerricoButtons() {
  document.querySelectorAll("button").forEach((buttonNode) => {
    buttonNode.disabled = true;
  });
}

function enableAllAddPerricoButtons() {
  document.querySelectorAll("button").forEach((buttonNode) => {
    buttonNode.disabled = false;
  });
}

const addPerrico = async (image, addToStart) => {
  const perricoImg = await getRandomDogImage(breedToAdd);

  const dogList = document.querySelector("#dog-list");

  const isAnyFilterSelected = document.querySelector(".filter-selected");
  // Si hay alg칰n filtro seleccionado los perritos se a침aden con display none.

  const dogNode = document.createElement("div");
  dogNode.className = "card";
  dogNode.style.display = isAnyFilterSelected ? "none" : "";

  dogNode.innerHTML = `
  <img src="${image || perricoImg}" alt="Perro" />
  <br />
  <p><span class="like-count"></span>仇벒잺 <span class="dislike-count"></span>游뱙</p>
  <button class="like">Precios칤simo</button> <button class="dislike">Fe칤sisimo</button>`;

  if (addToStart) {
    dogList.prepend(dogNode);
  } else {
    dogList.append(dogNode); // Tambi칠n existe appendChild();
  }
  giveDogNodeListeners(dogNode);
};

//Mucho cuidado, no puedes hacer que dogList = document.querySelector('#dog-list').innerHTML; y luego poner dogList = newDog + dogList, es una variable const, no cambias la variable si no innerHTML de la direccion que almacena:
// dogList.innerHTML = newDog + dogList.innerHTML.

/*

LISTENERS DE LOS BOTONES QUE A칌ADEN PERRICOS.

*/

document.querySelector("#add-1-perrico").addEventListener("click", async () => {
  clearWarningText();

  disableAllAddPerricoButtons();
  await addPerrico();
  enableAllAddPerricoButtons();
});

document.querySelector("#add-perrico-start").addEventListener("click", async function () {
  clearWarningText();

  disableAllAddPerricoButtons();
  await addPerrico(false, true);
  enableAllAddPerricoButtons();
});

document.querySelector("#add-5-perrico").addEventListener("click", async function () {
  clearWarningText();

  disableAllAddPerricoButtons();
  addPerrico();
  addPerrico();
  addPerrico();
  addPerrico();
  await addPerrico(); // Esto no funciona, habr칤a que usar promiseAll. Aqu칤 se llaman en orden, pero la quinta podr칤a terminar su ejecuci칩n antes de la segunda y este enfoque no funcionar칤a.
  enableAllAddPerricoButtons();
});

/*

LISTENERS DE LOS BOTONES QUE FILTRAN Y FUNCI칍N DE FILTRADO.

*/

const likeFilterButton = document.querySelector("#like-filter");

likeFilterButton.addEventListener("click", function () {
  likeFilterButton.classList.toggle("filter-selected");
  filterPerricos();
  //Mucho cuidado aqu칤 con el orden de las cosas, de ir el toggle antes que el condicional, la primera ejecuci칩n se rompe siempre, ya que los oculta, adquiere la clase que permite mostrarlos y los vuelve a mostrar.
});

const dislikeFilter = document.querySelector("#dislike-filter");

dislikeFilter.addEventListener("click", function () {
  dislikeFilter.classList.toggle("filter-selected");
  filterPerricos();
});

function filterPerricos() {
  const isLikeFilterSelected = likeFilterButton.classList.contains("filter-selected");
  const isDislikeSelected = dislikeFilter.classList.contains("filter-selected");

  document.querySelectorAll(".card").forEach((dogCard) => {
    // si no hay ning칰n filtro aplicado, lo muestra
    if (!isLikeFilterSelected && !isDislikeSelected) {
      dogCard.style.display = "";
      return;
    }

    // si preciosismo aplicado y hay preciosisimo lo muestra
    const likeCount = dogCard.querySelector(".like-count").innerText;
    if (likeCount !== "" && isLikeFilterSelected) {
      dogCard.style.display = "";
      return;
    }

    // si fe칤simo aplicado y hay fe칤simo lo muestra
    const dislikeCount = dogCard.querySelector(".dislike-count").innerText;
    if (dislikeCount !== "" && isDislikeSelected) {
      dogCard.style.display = "";
      return;
    }

    dogCard.style.display = "none";
  });
}

/*

SECCI칍N FINAL DE INTERVALO PARA A칌ADIR UN PAR DE PERRITOS.

*/

let automaticPerrosCount = 0;

const intervalId = setInterval(() => {
  addPerrico();
  automaticPerrosCount++;

  if (automaticPerrosCount === 2) {
    clearInterval(intervalId);
  }
}, 5000); //A침ade un perrico cada 10 segundos, tras a침adir dos para.

renderPerricoArray(); //Renderiza los dos perricos iniciales.

//La funci칩n/m칠todo .addEventListener incluye un primer par치metro en referencia a lo que est치 escuchando. Se trata de un string espec칤fico. Hay animation, clipboard, composition, focus, fullscreen, keyboard, mouse, pointer, scroll, touch y transition events. Cada uno presenta diferentes strings de evento que podr칤an ser escuchados con un addEventListener para actuar al ocurrir su ejecuci칩n. (hay mas events que he dejado fuera, se encuentran en esta web --> https://developer.mozilla.org/en-US/docs/Web/Events).

//Su segundo par치metro hace referencia a lo que debe cambiar con ese evento, en este caso es la funci칩n que ejecuta addPerrico(); Hay un tercer par치metro que, de momento, no usaremos.
