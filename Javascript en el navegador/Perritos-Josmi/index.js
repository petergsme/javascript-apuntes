const perricosArray = [
  'https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg',
  'https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg',
];
//'perricosArray' es el contenedor de las im치genes de los dos primeros perricos que se pintan en pantalla por defecto al cargar la p치gina.

/*

SECCI칍N INICIAL DE TIMEOUT

*/

const timeOutId = setTimeout(() => {
  document.querySelector('#alert').style.display = 'inline-block';
}, 3000); // A los 10 segundos muestra un texto que te dije que clickes un fucking boton.

// De dejar en mi caso display vac칤o para que intentara mostrarse no ir칤a. Esto solo funciona cuando ese display none lo has metido en su etiqueta de html como propiedad. Si lo metiste con CSS tienes que darle un bloque real.

function clearWarningText() {
  clearTimeout(timeOutId);
  document.querySelector('#alert').style.display = 'none';
} //Cuando clicas un boton llamas a esta funcion, sirve para que no se muestre el texto que dice que clickes y se carga el timeout formalmente.

/*

FUNCIONES B츼SICAS PARA A칌ADIR PERRICOS Y DAR LISTENERS A LOS BOTONES DE SUS TARJETAS QUE A칌ADAN VOTOS.

*/

const giveDogVotesListeners = () => {
  document.querySelectorAll('.like').forEach((button) => {
    button.addEventListener('click', () => {
      const parrafo = button.previousElementSibling; //Desde el bot칩n seleccionamos su hermano anterior, el p치rrafo con contadores.
      const likeCountNode = parrafo.querySelector('.like-count'); //Guardamos la posici칩n del contador positivo en una variable.
      likeCountNode.innerText = Number(likeCountNode.innerText) + 1; //Convertimos a n칰mero su interior y sumamos 1.
    });
  });

  document.querySelectorAll('.dislike').forEach((button) => {
    button.addEventListener('click', () => {
      const dislikeCountNode = button.closest('.card').querySelector('.dislike-count'); // Ojito a como usamos aqu칤 closest, que solo busca hacia arriba, llegamos arriba y bajamos.
      dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1;
    });
  });
};

function renderPerricoArray() {
  const dogList = document.querySelector('#dog-list');
  dogList.innerHTML = '';

  perricosArray.forEach((dogImage, index) => {
    const htmlAdd = `<div class="card">
  <img src="${dogImage}" alt="Perro" />
  <br />
  <p><span class="like-count"></span>仇벒잺 <span class="dislike-count"></span>游뱙</p>
  <button class="like">Precios칤simo</button> <button class="dislike">Fe칤sisimo</button>
</div>`;

    dogList.innerHTML += htmlAdd;
  });
  giveDogVotesListeners();
}

const addPerrico = async (addToStart) => {
  const perricoImg = await getRandomDogImage();

  const dogList = document.querySelector('#dog-list');

  const isAnyFilterSelected = document.querySelector('.filter-selected');
  // Si hay alg칰n filtro seleccionado los perritos se a침aden con display none.

  const htmlAdd = `<div class="card" ${isAnyFilterSelected ? 'style="display:none"' : ''}>
  <img src="${perricoImg}" alt="Perro" />
  <br />
  <p><span class="like-count"></span>仇벒잺 <span class="dislike-count"></span>游뱙</p>
  <button class="like">Precios칤simo</button> <button class="dislike">Fe칤sisimo</button>
</div>`;

  if (addToStart) {
    dogList.innerHTML = htmlAdd + dogList.innerHTML;
    //Como el HTML es en esencia un string multil칤nea, para a침adir m치s sin borrar el que ya hay operamos con +=, que CONCATENA los strings, o lo que es lo mismo pone el codigo del html al lado del anterior.
  } else {
    dogList.innerHTML = dogList.innerHTML + htmlAdd;
  }
  giveDogVotesListeners();
};

//Mucho cuidado, aqu칤 arriba accedes al INNERHTML de dogList, no puedes hacer que dogList = document.querySelector('#dog-list').innerHTML; y luego poner dogList = newDog + dogList, es una variable const. Estamos trabajando con innerHTML.

/*

LISTENERS DE LOS BOTONES QUE A칌ADEN PERRICOS.

*/

document.querySelector('#add-1-perrico').addEventListener('click', () => {
  addPerrico();
  clearWarningText();
});

document.querySelector('#add-perrico-start').addEventListener('click', function () {
  addPerrico(true);
  clearWarningText();
});

document.querySelector('#add-5-perrico').addEventListener('click', function () {
  clearWarningText();

  addPerrico();
  addPerrico();
  addPerrico();
  addPerrico();
  addPerrico();
});

/*

LISTENERS DE LOS BOTONES QUE FILTRAN Y FUNCI칍N DE FILTRADO.

*/

const likeFilterButton = document.querySelector('#like-filter');

likeFilterButton.addEventListener('click', function () {
  likeFilterButton.classList.toggle('filter-selected');
  filterPerricos();
  //Mucho cuidado aqu칤 con el orden de las cosas, de ir el toggle antes que el condicional, la primera ejecuci칩n se rompe siempre, ya que los oculta, adquiere la clase que permite mostrarlos y los vuelve a mostrar.
});

const dislikeFilter = document.querySelector('#dislike-filter');

dislikeFilter.addEventListener('click', function () {
  dislikeFilter.classList.toggle('filter-selected');
  filterPerricos();
});

function filterPerricos() {
  const isLikeFilterSelected = likeFilterButton.classList.contains('filter-selected');
  const isDislikeSelected = dislikeFilter.classList.contains('filter-selected');

  document.querySelectorAll('.card').forEach((dogCard) => {
    // si no hay ning칰n filtro aplicado, lo muestra
    if (!isLikeFilterSelected && !isDislikeSelected) {
      dogCard.style.display = '';
      return;
    }

    // si preciosismo aplicado y hay preciosisimo lo muestra
    const likeCount = dogCard.querySelector('.like-count').innerText;
    if (likeCount !== '' && isLikeFilterSelected) {
      dogCard.style.display = '';
      return;
    }

    // si fe칤simo aplicado y hay fe칤simo lo muestra
    const dislikeCount = dogCard.querySelector('.dislike-count').innerText;
    if (dislikeCount !== '' && isDislikeSelected) {
      dogCard.style.display = '';
      return;
    }

    dogCard.style.display = 'none';
  });
}

/*

SECCI칍N FINAL DE INTERVALO PARA A칌ADIR UN PAR DE PERRITOS.

*/

let automaticPerrosCount = 0;

const intervalId = setInterval(() => {
  addPerrico();
  automaticPerrosCount++;

  if (automaticPerrosCount === 2) {
    clearInterval(intervalId);
  }
}, 5000); //A침ade un perrico cada 10 segundos, tras a침adir dos para.

renderPerricoArray(); //Renderiza los dos perricos iniciales.

//La funci칩n/m칠todo .addEventListener incluye un primer par치metro en referencia a lo que est치 escuchando. Se trata de un string espec칤fico. Hay animation, clipboard, composition, focus, fullscreen, keyboard, mouse, pointer, scroll, touch y transition events. Cada uno presenta diferentes strings de evento que podr칤an ser escuchados con un addEventListener para actuar al ocurrir su ejecuci칩n. (hay mas events que he dejado fuera, se encuentran en esta web --> https://developer.mozilla.org/en-US/docs/Web/Events).

//Su segundo par치metro hace referencia a lo que debe cambiar con ese evento, en este caso es la funci칩n que ejecuta addPerrico(); Hay un tercer par치metro que, de momento, no usaremos.

// Para arreglar el tema de el reseteo del HTML. Tendr칤amos que crear funciones adicionales y reestructurar.

// 1. Tomar칤amos la parte de renderPerricoArray() que sirve para acceder a la ubicacion, el html que debemos a침adir y la instrucci칩n para a침adirlo. No necesitamos llamarlo ah칤.

// 2. A partir de esos pedazos de c칩digo, crear칤amos una nueva funci칩n (renderPerrico(image)) que utilizase las im치genes de los siguientes perritos a a침adir empleando los botones como par치metro. Sin necesidad de limpiar el HTML.

// 3. Tras eso deber칤amos sustituir esa nueva funci칩n en las que ya us치bamos para a침adir perricos (addPerricos y addFivePerricos).

// 4. Como en la concepci칩n original los listeners eran dados en renderPerricoArray(), ahora que ya no utilizamos esa funci칩n m치s que para pintar por pantalla el array inicial, necesitamos a침adir los listeners en otro lugar. Los a침adiremos al final de addPerricos y addFivePerricos, ya que para ese punto, renderPerrico(image) ya se habr치 ejecutado y los objetos sobre los que se han de a침adir los listeners existir치n.

// 5. Finalmente optimizar칤amos la funci칩n original para que hiciera uso de las otras funciones creadas y evitase repetir c칩digo.
