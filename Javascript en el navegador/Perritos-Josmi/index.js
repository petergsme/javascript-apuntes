const perricosArray = [
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
];
//'perricosArray' es el contenedor de las im치genes de los dos primeros perricos que se pintan en pantalla por defecto al cargar la p치gina.

const brokenDogVotesListeners = () => {
  const cardsWithoutListeners = Array.from(document.querySelectorAll(".card")).filter((dogCard) => {
    console.log(dogCard.querySelector("p").innerHTML.length);
    return dogCard.querySelector("p").innerHTML.length === 5;
  });

  cardsWithoutListeners.forEach((card) => {
    let positiveButton = card.querySelector(".vote-nice");
    let negativeButton = card.querySelector(".vote-ugly");

    let positiveVote = 0;
    let negativeVote = 0;

    positiveButton.addEventListener("click", () => {
      positiveVote += 1;
      card.querySelector("p").innerHTML = `<p>${positiveVote} 仇벒잺 ${negativeVote}游뱙</p>`;

      if (positiveVote >= 5) {
        positiveButton.style.visibility = "hidden";
      }
    });

    negativeButton.addEventListener("click", () => {
      negativeVote += 1;
      card.querySelector("p").innerHTML = `<p>${positiveVote} 仇벒잺 ${negativeVote}游뱙</p>`;

      if (negativeVote >= 5) {
        negativeButton.style.visibility = "hidden";
      }
    });
  }); //Se me fue de las manos. Aun filtrando las tarjetas para seleccionar las que no tienen event listeners, el haber declarado positiveVote y negativeVote de manera local hace que internamente se reinicien para las tarjetas a las que no se a침ade un nuevo event listener lo que provoca que se rompan.
};

const hideButton = (count, button) => {
  if (count >= 5) {
    button.style.visibility = "hidden";
  }
};

const giveDogVotesListeners = () => {
  document.querySelectorAll(".vote-nice").forEach((button) => {
    button.addEventListener("click", () => {
      const parrafo = button.previousElementSibling; //Desde el bot칩n seleccionamos su hermano anterior, el p치rrafo con contadores.
      const likeCountNode = parrafo.querySelector(".like-count"); //Guardamos la posici칩n del contador positivo en una variable.
      likeCountNode.innerText = Number(likeCountNode.innerText) + 1; //Convertimos a n칰mero su interior y sumamos 1.

      hideButton(likeCountNode.innerText, button);
    });
  });

  document.querySelectorAll(".vote-ugly").forEach((button) => {
    button.addEventListener("click", () => {
      const parrafo = button.previousElementSibling.previousElementSibling;
      const dislikeCountNode = parrafo.querySelector(".dislike-count");
      dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1;

      hideButton(dislikeCountNode.innerText, button);
    });
  });
};

function renderPerrico(image) {
  const dogList = document.querySelector("#dog-list"); //Guardamos el div espec칤fico al que queremos acceder en una variable.
  const htmltoAdd = `<div class="card">
  <img src="${image}" alt="Perro" />
  <br />
  <p><span class="like-count"></span>仇벒잺 <span class="dislike-count"></span>游뱙</p>
  <button class="vote-nice">Precios칤simo</button> <button class="vote-ugly">Fe칤sisimo</button>
</div>`;
  dogList.innerHTML += htmltoAdd; //Como el HTML es en esencia un string multil칤nea, para a침adir m치s sin borrar el que ya hay operamos con +=, que CONCATENA los strings, o lo que es lo mismo pone el codigo del html al lado del anterior.
}

function renderPerricoArray() {
  //Aqu칤 sol칤a estar "dogList.innerHTML = '';", limpiaba el HTML cuando la manera de renderizar los perricos depend칤a del array, ahora parece innecesario, as칤 que lo he eliminado.

  perricosArray.forEach((dogImage) => {
    renderPerrico(dogImage);
  });
  giveDogVotesListeners();
}

renderPerricoArray(); //Ejecuta la funci칩n de arriba 1 칰nica vez, para renderizar en la p치gina los dos perricos iniciales.

const addPerrico = async () => {
  //Las l칤neas de debajo ya no tienen mucho sentido en relaci칩n al contexto actual del c칩digo. Se refieren a cuando los perricos se renderizaban desde el array inicial.

  const perricoImg = await getRandomDogImage();
  perricosArray.push(perricoImg); //A침adimos la imagen del nuevo perrico al array inicial.
  renderPerricoArray(); //Ejecutamos la funci칩n anterior con la nueva imagen. B치sicamente borra todas y mete todas y la nueva de nuevo dentro de #dog-list.
};

const addPerricoEficiente = async () => {
  const perricoImg = await getRandomDogImage();
  renderPerrico(perricoImg);
  giveDogVotesListeners();
};

const addFivePerricos = async () => {
  for (let count = 1; count <= 5; count++) {
    const perricoImg = await getRandomDogImage();
    perricosArray.push(perricoImg);
  }
  renderPerricoArray();
};

const addFivePerricosEficiente = async () => {
  for (let count = 1; count <= 5; count++) {
    const perricoImg = await getRandomDogImage();
    renderPerrico(perricoImg);
  }
  giveDogVotesListeners();
};

const addPerricoStart = async () => {
  const perricoImg = await getRandomDogImage();

  const dogList = document.querySelector("#dog-list");
  const htmltoAdd = `<div class="card">
  <img src="${perricoImg}" alt="Perro" />
  <br />
  <p><span class="like-count"></span>仇벒잺 <span class="dislike-count"></span>游뱙</p>
  <button class="vote-nice">Precios칤simo</button> <button class="vote-ugly">Fe칤sisimo</button>
</div>`;

  dogList.innerHTML = htmltoAdd + dogList.innerHTML;

  giveDogVotesListeners();
};

const hideUglyDoggies = () => {
  document.querySelectorAll(".dislike-count").forEach((count) => {
    if (count.innerHTML > 0) {
      count.parentElement.parentElement.style.display = "none";
    }
  });
};

const showAllDoggies = () => {
  document.querySelectorAll(".card").forEach((dogCard) => {
    dogCard.style.display = ""; //"set display to an empty string - this will allow the row to use its default display value and so works in all browsers"
  });
};

//Seg칰n Josmi cargar todos los perritos al mismo tiempo ser칤a peor, porque en lugares con mala conexi칩n, ver치n los recuadros pero no ver치n los perros hast que terminen de cargar.

document.querySelector("#add-1-perrico").addEventListener("click", () => {
  addPerricoEficiente();
});

document.querySelector("#add-5-perrico").addEventListener("click", function () {
  addFivePerricosEficiente();
});

document.querySelector("#add-perrico-start").addEventListener("click", function () {
  addPerricoStart();
});

document.querySelector("#hide-uglies").addEventListener("click", function () {
  hideUglyDoggies();
  const selectButton = document.querySelector("#hide-uglies");
  if (selectButton.classList.contains("button-selected")) {
    showAllDoggies();
  }
  selectButton.classList.toggle("button-selected"); //Mucho cuidado aqu칤 con el orden de las cosas, de ir el toggle antes que el condicional, la primera ejecuci칩n se rompe siempre, ya que los oculta, adquiere la clase que permite mostrarlos y los vuelve a mostrar.
});

document.querySelector("#show-all").addEventListener("click", function () {
  showAllDoggies();
});

//Para los perritos positivos tendriamos que crear el boton, luego darle aqui un event listener para que ejecutase su funcion y sufuncion seria ocultar los perritos no positivos. para eso necesitariamos acceder a cada uno de los botones de dislike y comprobar que son mayores que 0, si lo son, hide esa tarjeta supongo.

//La funci칩n/m칠todo .addEventListener incluye un primer par치metro en referencia a lo que est치 escuchando. Se trata de un string espec칤fico. Hay animation, clipboard, composition, focus, fullscreen, keyboard, mouse, pointer, scroll, touch y transition events. Cada uno presenta diferentes strings de evento que podr칤an ser escuchados con un addEventListener para actuar al ocurrir su ejecuci칩n. (hay mas events que he dejado fuera, se encuentran en esta web --> https://developer.mozilla.org/en-US/docs/Web/Events).

//Su segundo par치metro hace referencia a lo que debe cambiar con ese evento, en este caso es la funci칩n que ejecuta addPerrico(); Hay un tercer par치metro que, de momento, no usaremos.

// Para arreglar el tema de el reseteo del HTML. Tendr칤amos que crear funciones adicionales y reestructurar.

// 1. Tomar칤amos la parte de renderPerricoArray() que sirve para acceder a la ubicacion, el html que debemos a침adir y la instrucci칩n para a침adirlo. No necesitamos llamarlo ah칤.

// 2. A partir de esos pedazos de c칩digo, crear칤amos una nueva funci칩n (renderPerrico(image)) que utilizase las im치genes de los siguientes perritos a a침adir empleando los botones como par치metro. Sin necesidad de limpiar el HTML.

// 3. Tras eso deber칤amos sustituir esa nueva funci칩n en las que ya us치bamos para a침adir perricos (addPerricos y addFivePerricos).

// 4. Como en la concepci칩n original los listeners eran dados en renderPerricoArray(), ahora que ya no utilizamos esa funci칩n m치s que para pintar por pantalla el array inicial, necesitamos a침adir los listeners en otro lugar. Los a침adiremos al final de addPerricos y addFivePerricos, ya que para ese punto, renderPerrico(image) ya se habr치 ejecutado y los objetos sobre los que se han de a침adir los listeners existir치n.

// 5. Finalmente optimizar칤amos la funci칩n original para que hiciera uso de las otras funciones creadas y evitase repetir c칩digo.
