const perricosArray = [
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
  "https://images.dog.ceo/breeds/affenpinscher/n02110627_10439.jpg",
];
//'perricosArray' es el contenedor de las im치genes de los dos primeros perricos que se pintan en pantalla por defecto al cargar la p치gina.

const giveListen = () => {
  document.querySelectorAll("#dog-list .card").forEach((card) => {
    let positiveButton = card.querySelector(".vote-nice");
    let negativeButton = card.querySelector(".vote-ugly");

    let positiveVote = 0;
    let negativeVote = 0;

    positiveButton.addEventListener("click", () => {
      positiveVote += 1;
      card.querySelector("p").innerHTML = `<p>${positiveVote} 仇벒잺 ${negativeVote}游뱙</p>`;

      if (positiveVote >= 5) {
        positiveButton.style.visibility = "hidden";
      }
    });

    negativeButton.addEventListener("click", () => {
      negativeVote += 1;
      card.querySelector("p").innerHTML = `<p>${positiveVote} 仇벒잺 ${negativeVote}游뱙</p>`;

      if (negativeVote >= 5) {
        negativeButton.style.visibility = "hidden";
      }
    });
  });
};

function renderPerricoArray(image) {
  const dogList = document.querySelector("#dog-list"); //Guardamos el div espec칤fico al que queremos acceder en una variable.

  const htmltoAdd = `<div class="card">
    <img src="${image}" alt="Perro" />
    <br />
    <p>仇벒잺 游뱙</p>
    <button class="vote-nice">Precios칤simo</button> <button class="vote-ugly">Fe칤sisimo</button>
  </div>`;

  dogList.innerHTML += htmltoAdd; //Como el HTML es en esencia un string multil칤nea, para a침adir m치s sin borrar el que ya hay operamos con +=, que CONCATENA los strings, o lo que es lo mismo pone el codigo del html al lado del anterior.
  giveListen();
}

renderPerricoArray(perricosArray[0]); //Ejecuta la funci칩n de arriba para llenar la p치gina con los dos perricos iniciales.
renderPerricoArray(perricosArray[0]);

const addPerrico = async () => {
  const perricoImg = await getRandomDogImage();
  renderPerricoArray(perricoImg); //Ejecutamos la funci칩n anterior con la nueva imagen. B치sicamente borra todas y mete todas y la nueva de nuevo dentro de #dog-list.
};

const addFivePerricos = async () => {
  for (let count = 1; count <= 5; count++) {
    const perricoImg = await getRandomDogImage();
    renderPerricoArray(perricoImg);
  }
};

document.querySelector("#add-1-perrico").addEventListener("click", () => {
  addPerrico();
});

document.querySelector("#add-5-perrico").addEventListener("click", function () {
  addFivePerricos();
}); //La he hecho as칤 en vez de usar 5 veces la otra, porque as칤 carga los 5 perritos al mismo tiempo, del otro modo los sacaba aparec칤an de uno en uno. Seg칰n Josmi esto tecnicamente es peor, porque en lugares con mala conexi칩n, veran los recuadros pero no ver치n los perros hast que terminen de cargar.

//La funci칩n/m칠todo .addEventListener incluye un primer par치metro en referencia a lo que est치 escuchando. Se trata de un string espec칤fico. Hay animation, clipboard, composition, focus, fullscreen, keyboard, mouse, pointer, scroll, touch y transition events. Cada uno presenta diferentes strings de evento que podr칤an ser escuchados con un addEventListener para actuar al ocurrir su ejecuci칩n. (hay mas events que he dejado fuera, se encuentran en esta web --> https://developer.mozilla.org/en-US/docs/Web/Events).

//Su segundo par치metro hace referencia a lo que debe cambiar con ese evento, en este caso es la funci칩n que ejecuta addPerrico(); Hay un tercer par치metro que, de momento, no usaremos.
